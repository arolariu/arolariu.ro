name: "official-e2e-action"

permissions:
  id-token: write
  contents: read
  issues: write

on:
#  schedule:
#   - cron: "0 * * * *" # Every hour UTC
  workflow_dispatch:

jobs:
  setup:
    if: github.repository == 'arolariu/arolariu.ro'
    name: '‚öôÔ∏è Setup Dependencies'
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.workspace-setup.outputs.node-cache-hit }}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v5

      - name: üì¶ Setup workspace
        id: workspace-setup
        uses: ./.github/actions/setup-workspace
        with:
          node-version: '24'
          cache-key-prefix: 'e2e'

      - name: üì¶ Installing global dependencies...
        run: npm install -g newman

  frontend:
    if: github.repository == 'arolariu/arolariu.ro'
    name: '[Frontend] End-to-End Testing (üß™)'
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      duration: ${{ steps.test.outputs.duration }}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v5

      - name: üì¶ Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          node-version: '24'
          cache-key-prefix: 'e2e'

      - name: üöÄ Running end-to-end tests...
        id: test
        run: |
          mkdir -p e2e-logs
          start=$(date +%s)
          npm run test:e2e:frontend 2>&1 | tee frontend-tests.log
          code=${PIPESTATUS[0]}
          end=$(date +%s)
          echo "duration=$((end-start))s" >> $GITHUB_OUTPUT
          exit $code
        env:
          E2E_TEST_AUTH_TOKEN: ${{ secrets.E2E_TEST_AUTH_TOKEN }}
          NEWMAN_REPORT_DIR: e2e-logs

      - name: üìä Upload frontend logs and reports
        if: failure()
        uses: actions/upload-artifact@v5
        with:
          name: frontend-test-logs
          path: |
            frontend-tests.log
            e2e-logs/newman-frontend.json
            e2e-logs/newman-frontend.xml
            e2e-logs/newman-frontend-summary.md

  backend:
    if: github.repository == 'arolariu/arolariu.ro'
    name: '[Backend] End-to-End Testing (üß™)'
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      duration: ${{ steps.test.outputs.duration }}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v5

      - name: üì¶ Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          node-version: '24'
          cache-key-prefix: 'e2e'

      - name: üå°Ô∏è Check dependencies health
        run: |
          echo "Fetching backend health status..."
          curl -s https://api.arolariu.ro/health -o backend-health.json
          cat backend-health.json

      - name: üöÄ Running end-to-end tests...
        id: test
        run: |
          mkdir -p e2e-logs
          start=$(date +%s)
          npm run test:e2e:backend 2>&1 | tee backend-tests.log
          code=${PIPESTATUS[0]}
          end=$(date +%s)
          echo "duration=$((end-start))s" >> $GITHUB_OUTPUT
          exit $code
        env:
          E2E_TEST_AUTH_TOKEN: ${{ secrets.E2E_TEST_AUTH_TOKEN }}
          NEWMAN_REPORT_DIR: e2e-logs

      - name: üìä Upload backend logs and reports
        if: failure()
        uses: actions/upload-artifact@v5
        with:
          name: backend-test-logs
          path: |
            backend-tests.log
            backend-health.json
            e2e-logs/newman-backend.json
            e2e-logs/newman-backend.xml
            e2e-logs/newman-backend-summary.md

  raise-issue-on-failure:
    name: 'Raise Issue on Failure'
    needs: [setup, frontend, backend]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.frontend.result == 'failure' || needs.backend.result == 'failure') }}
    env:
      TZ: Europe/Bucharest
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v5

      - name: üì¶ Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          node-version: '24'
          install-node-dependencies: 'false'
          cache-key-prefix: 'e2e'

      - name: üì• Download all test artifacts
        uses: actions/download-artifact@v5
        with:
          path: logs

      - name: üìù Create log summary (if logs exist)
        run: |
          echo "## üî• Log Tail from Failed Jobs" > log-tail.md
          # Check if any log files exist before processing
          if compgen -G "logs/*/*.log" > /dev/null; then
            for file in logs/*/*.log; do
              if [ -f "$file" ]; then
                echo -e "\n### $(basename "$file")" >> log-tail.md
                tail -n 50 "$file" >> log-tail.md
              fi
            done
            echo "‚úì Log summary created successfully"
          else
            echo "‚ö†Ô∏è No log files found - skipping log summary creation"
            echo -e "\n_No log files were found in the artifacts._" >> log-tail.md
          fi
        shell: bash

      - name: üêõ Create GitHub Issue for Test Failure
        uses: actions/github-script@v8
        env:
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          EVENT_NAME: ${{ github.event_name }}
          SERVER_URL: ${{ github.server_url }}
          FRONTEND_STATUS: ${{ needs.frontend.result }}
          FRONTEND_DURATION: ${{ needs.frontend.outputs.duration }}
          BACKEND_STATUS: ${{ needs.backend.result }}
          BACKEND_DURATION: ${{ needs.backend.outputs.duration }}
          ARTIFACTS_DIR: logs
        with:
          script: |
            // Install dependencies required by the script
            const { execSync } = require('child_process');
            execSync('cd .github/scripts && npm ci', { stdio: 'inherit' });

            const {default: createE2EFailureIssueWrapper} = await import('${{ github.workspace }}/.github/scripts/src/create-e2e-failure-issue-wrapper.js');
            await createE2EFailureIssueWrapper({github, context, core, exec});
