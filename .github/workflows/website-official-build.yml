name: "website-official-build"

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

defaults:
  run:
    working-directory: ./sites/arolariu.ro

on:
  push:
    branches: ["preview"]
    paths: ["sites/arolariu.ro/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to. (e.g. 'development', 'production')"
        options:
          - "development"
          - "production"
        default: "development"
        required: true
        type: choice
      container_name:
        description: "The name of the container to build and deploy. (e.g. 'frontend/dev.arolariu', 'frontend/arolariu')"
        options:
          - "frontend/dev.arolariu"
          - "frontend/arolariu"
        default: "frontend/dev.arolariu"
        required: true
        type: choice

env:
  COMMIT_SHA: ${{ github.sha }}
  PRODUCTION: ${{ inputs.environment == 'production' && 'true' || 'false' }}
  AZURE_CLIENT_ID: ${{secrets.AZURE_FRONTEND_MANAGED_IDENTITY_CLIENT_ID}}
  AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

jobs:
  test:
    name: üß™ Test phase (1/2)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development'}}
    timeout-minutes: 10
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: üì¶ Installing Node.js...
        uses: actions/setup-node@v4.4.0
        with:
          node-version: latest

      - name: üì¶ Installing dependencies...
        run: |
          corepack enable
          yarn install --immutable
          yarn setup:azure
          yarn playwright install --with-deps
          yarn generate

      - name: üß™ Running Jest Unit tests...
        run: yarn test:jest
        env: # We will use local assets for the tests
          USE_CDN: "false"

      - name: üß™ Running Playwright E2E Component tests...
        run: yarn test:playwright
        env: # We will use local assets for the tests
          USE_CDN: "false"

      - name: üß™ Preparing UI tests (Building Storybook)...
        run: yarn storybook:build --quiet
        env: # We will use local assets for the tests
          USE_CDN: "false"

      - name: üß™ Running Smoke & Integration tests (Playwright on Storybook)...
        run: |
          yarn dlx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "yarn dlx http-server storybook-static --port 6006 --silent" \
            "yarn dlx wait-on tcp:6006 && yarn storybook:test"

      - name: ‚ùì Find Pull Request
        if: github.event_name == 'push' && github.ref == 'refs/heads/preview'
        id: find_pr
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: open

      - name: üì§ Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-report-${{ inputs.environment || 'development' }}-${{ github.run_id }}
          path: sites/arolariu.ro/code-cov/
          if-no-files-found: error
          retention-days: 7

      - name: üí¨ Create PR Comment
        uses: actions/github-script@v7
        if: github.event_name == 'push' && github.ref == 'refs/heads/preview' && steps.find_pr.outputs.number
        env:
          PR_NUMBER: ${{ steps.find_pr.outputs.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JOB_STATUS: ${{ job.status }}
          COMMIT_SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          BRANCH_NAME: ${{ github.ref_name }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Install dependencies required by the script
            const { execSync } = require('child_process');
            execSync('cd .github/scripts && npm ci', { stdio: 'inherit' });

            // Dynamically require ts-node to run the TypeScript file directly
            execSync('cd .github/scripts && npm install --no-save ts-node typescript @types/node', { stdio: 'inherit' });

            // Use ts-node to execute the script directly from the source folder
            const path = require('path');
            const { register } = require('./.github/scripts/node_modules/ts-node');

            // Register ts-node to handle TypeScript files
            register({
              transpileOnly: true,
              compilerOptions: {
                module: 'commonjs',
                target: 'es2020',
              }
            });

            // Now run the script directly from src
            const script = require('./.github/scripts/src/create-pr-comment.ts');
            await script.default({github, context, core, exec});

      - name: ‚òÇÔ∏è Uploading code coverage report to CodeCov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: "sites/arolariu.ro/code-cov"

  build:
    name: ‚öíÔ∏è Build phase (2/2)
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development'}}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4.2.2

      - name: üîí Performing auth against Azure Public Cloud...
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîí Performing auth against private Azure Container Registry...
        uses: Azure/docker-login@v2
        with:
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}

      - name: üì¶ Installing Node.js...
        uses: actions/setup-node@v4.4.0
        with:
          node-version: latest

      - name: üì¶ Installing dependencies...
        run: |
          corepack enable
          yarn install --immutable
          yarn setup:azure
          yarn generate

      - name: üèóÔ∏è Building the docker container...
        env:
          CONTAINER_NAME: ${{inputs.container_name || 'frontend/dev.arolariu'}}
          CONTAINER_TAG: ${{inputs.environment == 'production' && github.sha || 'latest'}}
        run: docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{env.CONTAINER_NAME}}:${{env.CONTAINER_TAG}} .

      - name: ‚è´ Pushing the docker container...
        env:
          CONTAINER_NAME: ${{inputs.container_name || 'frontend/dev.arolariu'}}
          CONTAINER_TAG: ${{inputs.environment == 'production' && github.sha || 'latest'}}
        run: docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{env.CONTAINER_NAME}}:${{env.CONTAINER_TAG}}
