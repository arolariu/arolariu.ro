name: "website-official-build"

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

defaults:
  run:
    working-directory: ./sites/arolariu.ro

on:
  push:
    branches: ["preview"]
    paths: ["sites/arolariu.ro/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to. (e.g. 'development', 'production')"
        options:
          - "DEVELOPMENT"
          - "PRODUCTION"
        default: "DEVELOPMENT"
        required: true
        type: choice
      container_name:
        description: "The name of the container to build and deploy. (e.g. 'frontend/dev.arolariu', 'frontend/arolariu')"
        options:
          - "frontend/dev.arolariu"
          - "frontend/arolariu"
        default: "frontend/dev.arolariu"
        required: true
        type: choice

env:
  SITE_NAME: ${{ inputs.environment == 'PRODUCTION' && 'arolariu.ro' || 'dev.arolariu.ro' }}
  SITE_URL: ${{ inputs.environment == 'PRODUCTION' && 'https://arolariu.ro' || 'https://dev.arolariu.ro' }}
  SITE_ENV: ${{ inputs.environment || 'development'}}
  API_NAME: "api.arolariu.ro"
  API_URL: "https://api.arolariu.ro"
  COMMIT_SHA: ${{ github.sha }}
  USE_CDN: ${{ inputs.environment == 'PRODUCTION' && 'true' || 'false' }}
  AZURE_CLIENT_ID: ${{secrets.AZURE_FRONTEND_MANAGED_IDENTITY_CLIENT_ID}}
  AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

jobs:
  test:
    name: üß™ Test phase (1/2)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development'}}
    timeout-minutes: 10
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: üì¶ Installing Node.js...
        uses: actions/setup-node@v4.4.0
        with:
          node-version: latest

      - name: üöß Adding environment variables...
        run: |
          touch .env
          echo "TIMESTAMP=$(date -u  +"%Y-%m-%dT%H:%M:%S"Z)" >> .env
          json='${{ toJson(env) }}' # We convert the env object to it's JSON representation.
          for key in $(echo $json | jq -r 'keys[]'); do
            value=$(echo $json | jq -r '.'$key)
            echo "$key=$value" >> .env
          done

      - name: üöß Adding environment secrets...
        run: |
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> .env
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env
          echo "API_JWT=${{ secrets.API_JWT }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "CONFIG_STORE=${{ secrets.CONFIG_STORE }}" >> .env

      - name: üì¶ Installing dependencies...
        run: |
          corepack enable
          yarn install --immutable
          yarn playwright install --with-deps
          yarn generate
        working-directory: ./sites/arolariu.ro

      - name: üß™ Running Jest Unit tests...
        run: yarn test:jest
        working-directory: ./sites/arolariu.ro

      - name: üß™ Running Playwright E2E Component tests...
        run: yarn test:playwright
        working-directory: ./sites/arolariu.ro
        env:
          CI: "true"

      - name: üß™ Preparing UI tests (Building Storybook)...
        run: yarn storybook:build --quiet
        working-directory: ./sites/arolariu.ro

      - name: üß™ Running Smoke & Integration tests (Playwright on Storybook)...
        run: |
          yarn dlx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "yarn dlx http-server storybook-static --port 6006 --silent" \
            "yarn dlx wait-on tcp:6006 && yarn storybook:test"
        working-directory: ./sites/arolariu.ro

      - name: üì§ Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ inputs.environment || 'development' }}-${{ github.run_id }}
          path: sites/arolariu.ro/playwright-report/
          retention-days: 7

      - name: üì§ Upload Jest Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-report-${{ inputs.environment || 'development' }}-${{ github.run_id }}
          path: sites/arolariu.ro/jest-reports/
          retention-days: 7

      - name: ‚ùì Find Pull Request
        if: github.event_name == 'push' && github.ref == 'refs/heads/preview'
        id: find_pr
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: open

      - name: üí¨ Create PR Comment
        uses: actions/github-script@v7
        if: github.event_name == 'push' && github.ref == 'refs/heads/preview' && steps.find_pr.outputs.number
        env:
          PR_NUMBER: ${{ steps.find_pr.outputs.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JOB_STATUS: ${{ job.status }}
          COMMIT_SHA: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          BRANCH_NAME: ${{ github.ref_name }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.github/scripts/dist/create-pr-comment.js');
            await script.default({github, context, core, exec});

  build:
    name: ‚öíÔ∏è Build phase (2/2)
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development'}}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4.2.2

      - name: üîí Performing auth against Azure Public Cloud...
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîí Performing auth against private Azure Container Registry...
        uses: Azure/docker-login@v2
        with:
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}

      - name: üöß Adding environment variables...
        run: |
          touch .env
          echo "TIMESTAMP=$(date -u  +"%Y-%m-%dT%H:%M:%S"Z)" >> .env
          json='${{ toJson(env) }}'
          for key in $(echo $json | jq -r 'keys[]'); do
            value=$(echo $json | jq -r '.'$key)
            echo "$key=$value" >> .env
          done

      - name: üöß Adding environment secrets...
        run: |
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> .env
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env
          echo "API_JWT=${{ secrets.API_JWT }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "CONFIG_STORE=${{ secrets.CONFIG_STORE }}" >> .env

      - name: üèóÔ∏è Building the docker container...
        env:
          CONTAINER_NAME: ${{inputs.container_name || 'frontend/dev.arolariu'}}
          CONTAINER_TAG: ${{inputs.environment == 'PRODUCTION' && github.sha || 'latest'}}
        run: docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{env.CONTAINER_NAME}}:${{env.CONTAINER_TAG}} .

      - name: ‚è´ Pushing the docker container...
        env:
          CONTAINER_NAME: ${{inputs.container_name || 'frontend/dev.arolariu'}}
          CONTAINER_TAG: ${{inputs.environment == 'PRODUCTION' && github.sha || 'latest'}}
        run: docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{env.CONTAINER_NAME}}:${{env.CONTAINER_TAG}}
