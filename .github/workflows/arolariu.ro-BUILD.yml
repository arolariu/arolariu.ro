name: "[BUILD]::arolariu.ro"
run-name: "[BUILD]::[LINUX] Building artifact for main platform, as requested by @${{ github.actor }}."

on:
  push:
    branches: ["main", "preview"]
    paths: ["sites/arolariu.ro/**"]
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        description: "The environment to deploy to. (e.g. 'development', 'production')"
        default: "development"
        required: true
        type: string
      container_name:
        description: "The name of the container to build and deploy."
        default: "frontend/dev.arolariu"
        required: true
        type: string
      container_tag:
        description: "The tag of the container to build and deploy."
        default: "latest"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  SITE_NAME: "arolariu.ro"
  SITE_URL: "https://arolariu.ro"
  SITE_ENV: ${{ inputs.environment }}
  API_NAME: "api.arolariu.ro"
  API_URL: "https://api.arolariu.ro"
  API_ENV: ${{ inputs.environment }}
  COMMIT_SHA: ${{ github.sha }}
  TIMESTAMP: ${{ github.event.head_commit.timestamp }}

defaults:
  run:
    working-directory: ./sites/arolariu.ro

jobs:
  test:
    name: Test phase (1/2)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 10
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4

      - name: üì¶ Installing performant NPM...
        run: |
          eval export $(echo PNPM_HOME=$HOME/.pnpm | tee -a $GITHUB_ENV);
          echo "$PNPM_HOME" >> $GITHUB_PATH
          curl -fsSL https://get.pnpm.io/install.sh | bash -

      - name: üì¶ Installing Node.js...
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: "pnpm"
          cache-dependency-path: "./sites/arolariu.ro/pnpm-lock.yaml"

      - name: üöß Adding environment variables...
        run: |
          touch .env
          for kvPair in ${{ toJson(env) }}; do
            key=$(echo $kvPair | jq -r 'keys[0]')
            value=$(echo $kvPair | jq -r '.'$key)
            echo "$key=$value" >> .env
          done

      - name: üöß Adding environment secrets...
        run: |
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> .env
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env
          echo "API_JWT=${{ secrets.API_JWT }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "CONFIG_STORE=${{ secrets.CONFIG_STORE }}" >> .env

      - name: üì¶ Installing dependencies...
        run: pnpm install --legacy-peer-deps && npx playwright install --with-deps

      - name: üß™ Preparing tests...
        run: pnpm storybook:build --quiet

      - name: üß™ Running Smoke & Integration tests...
        run: |
          pnpm dlx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "pnpm dlx http-server storybook-static --port 6006 --silent" \
            "pnpm dlx wait-on tcp:6006 && npm run storybook:test"

  build:
    name: Build phase (2/2)
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: üõ´ Checking out the branch inside the runner environment...
        uses: actions/checkout@v4

      - name: üîí Performing auth against Azure Public Cloud...
        uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîí Performing auth against private Azure Container Registry...
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: üöß Adding environment variables...
        run: |
          touch .env
          for kvPair in ${{ toJson(env) }}; do
            key=$(echo $kvPair | jq -r 'keys[0]')
            value=$(echo $kvPair | jq -r '.'$key)
            echo "$key=$value" >> .env
          done

      - name: üöß Adding environment secrets...
        run: |
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> .env
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env
          echo "API_JWT=${{ secrets.API_JWT }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "CONFIG_STORE=${{ secrets.CONFIG_STORE }}" >> .env

      - name: üèóÔ∏è Building the docker container...
        run: docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{inputs.container_name}}:${{inputs.container_tag}} .

      - name: ‚è´ Pushing the docker container...
        run: docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/${{inputs.container_name}}:${{inputs.container_tag}}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   environment:
  #     name: "development"
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

  #   steps:
  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v3
  #       with:
  #         app-name: "dev-arolariu"
  #         slot-name: "production"
  #         publish-profile: ${{ secrets.AROLARIU_WEB_APP_PUBLISHER_PROFILE_DEV }}
  #         images: "${{ secrets.AZURE_CONTAINER_REGISTRY_ADDRESS }}/frontend/dev.arolariu:latest"
