{"version":3,"file":"create-pr-comment.js","sourceRoot":"","sources":["../src/create-pr-comment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs/promises\";\r\nimport * as path from \"path\";\r\nimport * as core from \"@actions/core\";\r\nimport * as github from \"@actions/github\";\r\nimport * as exec from \"@actions/exec\";\r\nimport prettyBytes from \"pretty-bytes\";\r\n\r\n// Type alias for the Octokit client instance\r\ntype OctokitClient = ReturnType<typeof github.getOctokit>;\r\n\r\n/**\r\n * Interface for script parameters\r\n */\r\ninterface ScriptParams {\r\n  github: OctokitClient;\r\n  context: typeof github.context;\r\n  core: typeof core;\r\n  exec: typeof exec;\r\n}\r\n\r\n/**\r\n * Interface for workflow information\r\n */\r\ninterface WorkflowInfo {\r\n  prNumber: number;\r\n  prUrl: string;\r\n  runId: string;\r\n  workflowRunUrl: string;\r\n  shortCurrentCommitSha: string;\r\n  commitUrl: string;\r\n  branchName: string;\r\n  jobStatus: string;\r\n}\r\n\r\n/**\r\n * Interface for file comparison item\r\n */\r\ninterface FileComparisonItem {\r\n  path: string;\r\n  mainSize?: number;\r\n  previewSize?: number;\r\n  diff: number;\r\n  status: string;\r\n}\r\n\r\nconst BUNDLE_TARGET_FOLDERS: string[] = [\r\n  \"sites/arolariu.ro\",\r\n  \"sites/api.arolariu.ro\",\r\n  \"sites/docs.arolariu.ro\",\r\n];\r\n\r\n/**\r\n * Retrieves file sizes for specified folders from a given git branch.\r\n * @param params - The script parameters (for core and exec).\r\n * @param branchName - The name of the branch (e.g., 'refs/remotes/origin/main', 'HEAD').\r\n * @param targetFolders - An array of folder paths to inspect.\r\n * @returns A map of file paths to their sizes in bytes.\r\n */\r\nasync function getFileSizesFromGit(\r\n  params: ScriptParams,\r\n  branchName: string,\r\n  targetFolders: string[]\r\n): Promise<Record<string, number>> {\r\n  const { core, exec } = params;\r\n  const filesMap: Record<string, number> = {};\r\n  for (const folder of targetFolders) {\r\n    try {\r\n      const folderPath = folder.endsWith(\"/\") ? folder.slice(0, -1) : folder;\r\n      const { stdout, stderr, exitCode } = await exec.getExecOutput(\r\n        `git ls-tree -r -l ${branchName} -- ${folderPath}`,\r\n        [],\r\n        { ignoreReturnCode: true, silent: true }\r\n      );\r\n\r\n      if (exitCode !== 0) {\r\n        core.debug(\r\n          `git ls-tree for branch '${branchName}' and folder '${folderPath}' exited with ${exitCode}. Stderr: ${\r\n            stderr || \"N/A\"\r\n          }`\r\n        );\r\n        if (stderr && stderr.includes(\"fatal: Not a valid object name\")) {\r\n          core.warning(\r\n            `Branch '${branchName}' or path '${folderPath}' might not exist or was not fetched correctly for bundle size check.`\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (!stdout || !stdout.trim()) {\r\n        continue;\r\n      }\r\n\r\n      const lines = stdout.trim().split(\"\\n\");\r\n      for (const line of lines) {\r\n        if (!line.trim()) continue;\r\n        const parts = line.split(\"\\t\");\r\n        if (parts.length === 2) {\r\n          const meta = parts[0].trim().split(/\\s+/);\r\n          if (meta.length === 4 && meta[1] === \"blob\") {\r\n            const filePath = parts[1];\r\n            const sizeStr = meta[3];\r\n            if (sizeStr !== \"-\") {\r\n              const size = parseInt(sizeStr, 10);\r\n              if (!isNaN(size)) {\r\n                filesMap[filePath] = size;\r\n              } else {\r\n                core.warning(\r\n                  `Could not parse size '${sizeStr}' from ls-tree line: '${line}'`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          core.warning(\r\n            `Could not parse line from ls-tree (expected tab separator): '${line}'`\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      const err = error as Error;\r\n      core.error(\r\n        `Error processing folder ${folder} for branch ${branchName} with git ls-tree: ${err.message}`\r\n      );\r\n    }\r\n  }\r\n  return filesMap;\r\n}\r\n\r\n/**\r\n * Generates the initial workflow information section for the PR comment.\r\n * @param workflowInfo - Basic workflow, PR, and job status information.\r\n * @returns Markdown string for the workflow info section.\r\n */\r\nfunction getWorkflowInfoSection({\r\n  prNumber,\r\n  prUrl,\r\n  runId,\r\n  workflowRunUrl,\r\n  shortCurrentCommitSha,\r\n  commitUrl,\r\n  branchName,\r\n  jobStatus,\r\n}: WorkflowInfo): string {\r\n  const statusEmoji =\r\n    jobStatus === \"success\" ? \"✅\" : jobStatus === \"failure\" ? \"❌\" : \"⚠️\";\r\n  const statusText = jobStatus.charAt(0).toUpperCase() + jobStatus.slice(1);\r\n\r\n  let section = `## ${statusEmoji} Tests ${statusText} for [\\`${shortCurrentCommitSha}\\`](${commitUrl})\\n\\n`;\r\n  section += `**PR:** [#${prNumber}](${prUrl}) | **Branch:** \\`${branchName}\\` | **Workflow:** [#${runId} Action](${workflowRunUrl})\\n\\n`;\r\n  section += `----\\n`;\r\n  return section;\r\n}\r\n\r\n/**\r\n * Generates the branch comparison table section (commits, not bundle sizes).\r\n * @param params - The script parameters.\r\n * @param currentCommitSha - The full SHA of the current commit.\r\n * @param shortCurrentCommitSha - The short SHA of the current commit.\r\n * @returns Markdown string for the branch comparison section.\r\n */\r\nasync function getBranchCommitComparisonSection(\r\n  params: ScriptParams,\r\n  currentCommitSha: string,\r\n  shortCurrentCommitSha: string\r\n): Promise<string> {\r\n  const { core, exec } = params;\r\n  let section = `### 📊 Branch Comparison\\n\\n`;\r\n  section += `| Branch          | SHA         | Commits vs. Main |\\n`;\r\n  section += `|-----------------|-------------|------------------|\\n`;\r\n\r\n  let mainBranchShaShort = \"N/A\";\r\n  let commitsAhead = \"N/A\";\r\n\r\n  try {\r\n    await exec.getExecOutput(\r\n      \"git fetch origin main:refs/remotes/origin/main --depth=50\"\r\n    );\r\n    const { stdout: mainShaFull } = await exec.getExecOutput(\r\n      \"git rev-parse refs/remotes/origin/main\"\r\n    );\r\n    mainBranchShaShort = mainShaFull.trim().substring(0, 7);\r\n\r\n    const { stdout: commitsAheadOutput } = await exec.getExecOutput(\r\n      `git rev-list --count refs/remotes/origin/main..${currentCommitSha}`\r\n    );\r\n    commitsAhead = commitsAheadOutput.trim();\r\n  } catch (error) {\r\n    const err = error as Error;\r\n    console.error(\r\n      \"Failed to get main branch information for commit comparison:\",\r\n      err.message\r\n    );\r\n    core.warning(\r\n      `Failed to retrieve main branch information for commit comparison: ${err.message}.`\r\n    );\r\n    mainBranchShaShort = \"Error\";\r\n    commitsAhead = \"Error\";\r\n  }\r\n\r\n  section += `| **Preview**     | \\`${shortCurrentCommitSha}\\` | ${commitsAhead}          |\\n`;\r\n  section += `| **Main**        | \\`${mainBranchShaShort}\\` | N/A              |\\n\\n`;\r\n  section += `----\\n`;\r\n  return section;\r\n}\r\n\r\n/**\r\n * Interface for Jest test summary\r\n */\r\ninterface JestSummary {\r\n  numTotalTestSuites: number;\r\n  numPassedTestSuites: number;\r\n  numFailedTestSuites: number;\r\n  numPendingTestSuites?: number;\r\n  numTotalTests: number;\r\n  numPassedTests: number;\r\n  numFailedTests: number;\r\n  numPendingTests?: number;\r\n  startTime: number | string;\r\n  success: boolean;\r\n  testResults: Array<{\r\n    name: string;\r\n    status: string;\r\n    assertionResults?: Array<{\r\n      title: string;\r\n      status: string;\r\n      failureMessages?: string[];\r\n    }>;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Generates the Jest test results section.\r\n * @param core - The GitHub Actions core helper.\r\n * @returns Markdown string for the Jest test results section.\r\n */\r\nasync function getJestResultsSection(\r\n  core: ScriptParams[\"core\"]\r\n): Promise<string> {\r\n  let section = `### 🧪 Jest Test Results\\n\\n`;\r\n  const jestSummaryPath = path.join(\r\n    process.env.GITHUB_WORKSPACE ?? \".\",\r\n    \"sites/arolariu.ro/jest-summary.json\"\r\n  );\r\n  try {\r\n    const jestSummaryRaw = await fs.readFile(jestSummaryPath, \"utf8\");\r\n    const jestSummary: JestSummary = JSON.parse(jestSummaryRaw);\r\n\r\n    const {\r\n      numTotalTestSuites,\r\n      numPassedTestSuites,\r\n      numFailedTestSuites,\r\n      numPendingTestSuites,\r\n    } = jestSummary;\r\n    const { numTotalTests, numPassedTests, numFailedTests, numPendingTests } =\r\n      jestSummary;\r\n    const startTime = new Date(jestSummary.startTime);\r\n\r\n    section += `**Summary:**\\n`;\r\n    section += `*   **Test Suites:** ${numPassedTestSuites} passed, ${numFailedTestSuites} failed, ${\r\n      numPendingTestSuites ?? 0\r\n    } pending, ${numTotalTestSuites} total\\n`;\r\n    section += `*   **Tests:**       ${numPassedTests} passed, ${numFailedTests} failed, ${\r\n      numPendingTests ?? 0\r\n    } pending, ${numTotalTests} total\\n`;\r\n    section += `*   **Start Time:**  ${startTime.toLocaleString()}\\n`;\r\n    section += `*   **Overall:**     ${\r\n      jestSummary.success ? \"✅ Passed\" : \"❌ Failed\"\r\n    }\\n\\n`;\r\n\r\n    if (numFailedTests > 0 && jestSummary.testResults) {\r\n      section += `**Failed Tests:**\\n`;\r\n      for (const testResult of jestSummary.testResults) {\r\n        if (testResult.status === \"failed\" && testResult.assertionResults) {\r\n          const suitePath = testResult.name.replace(\r\n            process.env.GITHUB_WORKSPACE ?? \"\",\r\n            \"\"\r\n          );\r\n          section += `  *   Suite: \\`${suitePath}\\`\\n`;\r\n          for (const assertion of testResult.assertionResults) {\r\n            if (assertion.status === \"failed\") {\r\n              section += `      *   Test: \\`${assertion.title}\\`\\n`;\r\n              if (\r\n                assertion.failureMessages &&\r\n                assertion.failureMessages.length > 0\r\n              ) {\r\n                section += `          <details><summary>Show Error</summary>\\n\\n`;\r\n                section += `\\`\\`\\`\\n${assertion.failureMessages\r\n                  .join(\"\\n\\n\")\r\n                  .substring(0, 1000)}\\n\\`\\`\\`\\n`;\r\n                section += `          </details>\\n`;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      section += `\\n`;\r\n    }\r\n  } catch (error) {\r\n    const err = error as Error;\r\n    core.warning(\r\n      `Could not read or parse Jest summary from ${jestSummaryPath}: ${err.message}`\r\n    );\r\n    section += `_Could not retrieve Jest test results._\\n\\n`;\r\n  }\r\n  section += `----\\n`;\r\n  return section;\r\n}\r\n\r\n/**\r\n * Generates the Playwright test results section.\r\n * @param jobStatus - The status of the job (e.g., \"success\", \"failure\").\r\n * @param workflowRunUrl - The URL to the workflow run for artifact links.\r\n * @returns Markdown string for the Playwright test results section.\r\n */\r\nfunction getPlaywrightResultsSection(\r\n  jobStatus: string,\r\n  workflowRunUrl: string\r\n): string {\r\n  let statusEmoji: string;\r\n  if (jobStatus === \"success\") {\r\n    statusEmoji = \"✅\";\r\n  } else if (jobStatus === \"failure\") {\r\n    statusEmoji = \"❌\";\r\n  } else {\r\n    statusEmoji = \"⚠️\";\r\n  }\r\n\r\n  let testStatusMessage = \"\";\r\n  if (jobStatus === \"success\") {\r\n    testStatusMessage = \"All Playwright tests passed!\";\r\n  } else if (jobStatus === \"failure\") {\r\n    testStatusMessage = \"Playwright tests failed.\";\r\n  } else {\r\n    testStatusMessage = `Playwright tests status: ${jobStatus}.`;\r\n  }\r\n  let section = `### ${statusEmoji} Playwright Tests\\n\\n`;\r\n  section += `${testStatusMessage} ([View Full Report](${workflowRunUrl}#artifacts))\\n\\n`;\r\n  section += `----\\n`;\r\n  return section;\r\n}\r\n\r\n/**\r\n * Generates the bundle size comparison section with dropdowns for each target folder.\r\n * @param params - The script parameters.\r\n * @param targetFolders - An array of folder paths to compare.\r\n * @returns Markdown string for the bundle size comparison section.\r\n */\r\nasync function getBundleSizeComparisonSection(\r\n  params: ScriptParams,\r\n  targetFolders: string[]\r\n): Promise<string> {\r\n  const { core, exec } = params;\r\n  let section = `### 📦 Bundle Size Analysis (vs. Main)\\n\\n`;\r\n  let anyChangesOverall = false;\r\n\r\n  try {\r\n    await exec.getExecOutput(\r\n      \"git fetch origin main:refs/remotes/origin/main --depth=1 --no-tags --quiet\"\r\n    );\r\n    const mainBranchFiles = await getFileSizesFromGit(\r\n      params,\r\n      \"refs/remotes/origin/main\",\r\n      targetFolders\r\n    );\r\n    const previewBranchFiles = await getFileSizesFromGit(\r\n      params,\r\n      \"HEAD\",\r\n      targetFolders\r\n    );\r\n\r\n    for (const folder of targetFolders) {\r\n      const filesInFolder: FileComparisonItem[] = [];\r\n      let folderMainTotalSize = 0;\r\n      let folderPreviewTotalSize = 0;\r\n\r\n      const relevantFilePaths = new Set<string>();\r\n      Object.keys(mainBranchFiles).forEach((p) => {\r\n        if (p.startsWith(folder + \"/\")) relevantFilePaths.add(p);\r\n      });\r\n      Object.keys(previewBranchFiles).forEach((p) => {\r\n        if (p.startsWith(folder + \"/\")) relevantFilePaths.add(p);\r\n      });\r\n\r\n      for (const path of relevantFilePaths) {\r\n        const mainSize = mainBranchFiles[path];\r\n        const previewSize = previewBranchFiles[path];\r\n\r\n        if (mainSize !== undefined) folderMainTotalSize += mainSize;\r\n        if (previewSize !== undefined) folderPreviewTotalSize += previewSize;\r\n\r\n        let status = \"\";\r\n        let diff = 0;\r\n        let changed = false;\r\n\r\n        if (mainSize === undefined && previewSize !== undefined) {\r\n          status = \"Added\";\r\n          diff = previewSize;\r\n          changed = true;\r\n        } else if (mainSize !== undefined && previewSize === undefined) {\r\n          status = \"Removed\";\r\n          diff = -mainSize;\r\n          changed = true;\r\n        } else if (\r\n          mainSize !== undefined &&\r\n          previewSize !== undefined &&\r\n          mainSize !== previewSize\r\n        ) {\r\n          // Ensure both are defined before comparing\r\n          status = \"Modified\";\r\n          diff = previewSize - mainSize;\r\n          changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n          filesInFolder.push({ path, mainSize, previewSize, diff, status });\r\n        }\r\n      }\r\n\r\n      const folderDiff = folderPreviewTotalSize - folderMainTotalSize;\r\n      const numFilesChanged = filesInFolder.length;\r\n\r\n      if (numFilesChanged > 0 || folderDiff !== 0) {\r\n        anyChangesOverall = true;\r\n\r\n        // Determine diff sign\r\n        let diffSign = \"\";\r\n        if (folderDiff > 0) {\r\n          diffSign = \"+\";\r\n        } else if (folderDiff < 0) {\r\n          diffSign = \"-\";\r\n        }\r\n\r\n        const diffDisplay =\r\n          folderDiff === 0\r\n            ? \"---\"\r\n            : `${diffSign}${prettyBytes(Math.abs(folderDiff))}`;\r\n\r\n        let folderStatusText = \"Modified\";\r\n        if (numFilesChanged === 0 && folderDiff !== 0)\r\n          folderStatusText = \"Size Changed\";\r\n        else if (\r\n          folderPreviewTotalSize === 0 &&\r\n          folderMainTotalSize > 0 &&\r\n          numFilesChanged === relevantFilePaths.size\r\n        )\r\n          folderStatusText = \"Removed\";\r\n        else if (\r\n          folderMainTotalSize === 0 &&\r\n          folderPreviewTotalSize > 0 &&\r\n          numFilesChanged === relevantFilePaths.size\r\n        )\r\n          folderStatusText = \"Added\";\r\n        else if (folderDiff === 0 && numFilesChanged > 0)\r\n          folderStatusText = \"Internally Modified\";\r\n\r\n        section += `<details>\\n`;\r\n        section += `<summary><strong>\\`${folder}\\`</strong> - Total Diff: ${diffDisplay} (Preview: ${prettyBytes(\r\n          folderPreviewTotalSize\r\n        )} vs Main: ${prettyBytes(\r\n          folderMainTotalSize\r\n        )}) - ${numFilesChanged} file(s) changed (${folderStatusText})</summary>\\n\\n`;\r\n\r\n        if (numFilesChanged > 0) {\r\n          section += `| File Path (relative to folder) | Main Branch | Preview Branch | Difference | Status   |\\n`;\r\n          section += `|--------------------------------|-------------|----------------|------------|----------|\\n`;\r\n          filesInFolder.sort((a, b) => a.path.localeCompare(b.path));\r\n          for (const item of filesInFolder) {\r\n            // Determine item diff sign\r\n            let itemDiffSign = \"\";\r\n            if (item.diff > 0) {\r\n              itemDiffSign = \"+\";\r\n            } else if (item.diff < 0) {\r\n              itemDiffSign = \"-\";\r\n            }\r\n\r\n            const itemDiffDisplay =\r\n              item.diff === 0\r\n                ? \"---\"\r\n                : `${itemDiffSign}${prettyBytes(Math.abs(item.diff))}`;\r\n            const relativePath = item.path.substring(folder.length + 1);\r\n            section += `| \\`${relativePath}\\` | ${prettyBytes(\r\n              item.mainSize ?? 0 // Use ?? 0 to handle undefined for prettyBytes\r\n            )} | ${prettyBytes(item.previewSize ?? 0)} | ${itemDiffDisplay} | ${\r\n              item.status\r\n            } |\\n`;\r\n          }\r\n          section += `\\n`;\r\n        } else {\r\n          section += `  _No individual file changes in this folder, but total size may have changed due to other factors._\\n\\n`;\r\n        }\r\n        section += `</details>\\n\\n`;\r\n      } else {\r\n        section += `<details>\\n`;\r\n        section += `<summary><strong>\\`${folder}\\`</strong> - No changes (Preview: ${prettyBytes(\r\n          folderPreviewTotalSize\r\n        )}, Main: ${prettyBytes(folderMainTotalSize)})</summary>\\n`;\r\n        section += `  _No file changes detected in this folder._\\n\\n`;\r\n        section += `</details>\\n\\n`;\r\n      }\r\n    }\r\n\r\n    if (!anyChangesOverall) {\r\n      section +=\r\n        \"No significant changes in bundle sizes for monitored folders.\\n\\n\";\r\n    }\r\n  } catch (error) {\r\n    const err = error as Error;\r\n    core.error(`Failed to generate bundle size comparison: ${err.message}`);\r\n    section += `_Error generating bundle size comparison: ${err.message}_\\n\\n`;\r\n    anyChangesOverall = true;\r\n  }\r\n\r\n  if (\r\n    !anyChangesOverall &&\r\n    !section.includes(\"_Error generating bundle size comparison\")\r\n  ) {\r\n    return `### 📦 Bundle Size Analysis (vs. Main)\\n\\nNo significant changes in bundle sizes for monitored folders.\\n\\n----\\n`;\r\n  }\r\n\r\n  section += `----\\n`;\r\n  return section;\r\n}\r\n\r\n/**\r\n * Main function to create a comment on a pull request with test and build results.\r\n * @param params - The script parameters.\r\n * @returns A promise that resolves when the comment is created or if the process is skipped.\r\n */\r\nexport default async (params: ScriptParams): Promise<void> => {\r\n  const { github: octokit, context, core } = params;\r\n  const prNumberStr = process.env.PR_NUMBER;\r\n\r\n  if (\r\n    !prNumberStr ||\r\n    prNumberStr === \"null\" ||\r\n    prNumberStr === \"\" ||\r\n    prNumberStr === \"undefined\"\r\n  ) {\r\n    console.log(\r\n      `No open PR found for this commit (PR_NUMBER: ${prNumberStr}), or PR_NUMBER env var not set correctly. Skipping comment.`\r\n    );\r\n    return;\r\n  }\r\n\r\n  const prNumber = parseInt(prNumberStr);\r\n  if (isNaN(prNumber)) {\r\n    console.log(`Invalid PR_NUMBER: ${prNumberStr}. Skipping comment.`);\r\n    return;\r\n  }\r\n\r\n  const jobStatus = process.env.JOB_STATUS ?? \"unknown\";\r\n  const currentCommitSha = process.env.COMMIT_SHA;\r\n  const runId = process.env.RUN_ID;\r\n  const branchName = process.env.BRANCH_NAME;\r\n  const repoOwner = context.repo.owner;\r\n  const repoName = context.repo.repo;\r\n\r\n  if (!currentCommitSha || !runId || !branchName) {\r\n    core.setFailed(\r\n      \"Missing one or more essential environment variables (COMMIT_SHA, RUN_ID, BRANCH_NAME). Cannot create PR comment.\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  const shortCurrentCommitSha = currentCommitSha.substring(0, 7);\r\n  const workflowRunUrl = `https://github.com/${repoOwner}/${repoName}/actions/runs/${runId}`;\r\n  const commitUrl = `https://github.com/${repoOwner}/${repoName}/commit/${currentCommitSha}`;\r\n  const prUrl = `https://github.com/${repoOwner}/${repoName}/pull/${prNumber}`;\r\n\r\n  let commentBody = \"\";\r\n\r\n  const workflowInfo: WorkflowInfo = {\r\n    prNumber,\r\n    prUrl,\r\n    runId,\r\n    workflowRunUrl,\r\n    shortCurrentCommitSha,\r\n    commitUrl,\r\n    branchName,\r\n    jobStatus,\r\n  };\r\n  commentBody += getWorkflowInfoSection(workflowInfo);\r\n\r\n  commentBody += await getBranchCommitComparisonSection(\r\n    params,\r\n    currentCommitSha,\r\n    shortCurrentCommitSha\r\n  );\r\n\r\n  commentBody += await getJestResultsSection(core);\r\n\r\n  commentBody += getPlaywrightResultsSection(jobStatus, workflowRunUrl);\r\n\r\n  commentBody += await getBundleSizeComparisonSection(\r\n    params,\r\n    BUNDLE_TARGET_FOLDERS\r\n  );\r\n  try {\r\n    await octokit.rest.issues.createComment({\r\n      owner: repoOwner,\r\n      repo: repoName,\r\n      issue_number: prNumber,\r\n      body: commentBody,\r\n    });\r\n    console.log(`Successfully commented on PR #${prNumber}.`);\r\n  } catch (error) {\r\n    const err = error as Error;\r\n    core.setFailed(\r\n      `Failed to create PR comment for PR #${prNumber}: ${err.message}`\r\n    );\r\n  }\r\n};\r\n"]}