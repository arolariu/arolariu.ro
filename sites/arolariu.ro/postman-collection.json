{
  "$schema": "https://schema.postman.com/collection/json/v2.1.0/draft-04/collection.json",
  "info": {
    "name": "arolariu.ro",
    "description": "Frontend API route tests for arolariu.ro Next.js application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level test: Status code validation",
          "pm.test(\"Response status is successful (200-299)\", function () {",
          "    pm.expect(pm.response.code).to.be.within(200, 299,",
          "        `Expected 2xx status, got ${pm.response.code}`);",
          "});",
          "",
          "// Collection-level test: STRICT response time (<100ms for optimal UX)",
          "pm.test(\"Response time is under 100ms (strict performance)\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(100,",
          "        `Response time ${pm.response.responseTime}ms exceeds 100ms SLA`);",
          "});",
          "",
          "// Collection-level test: Content-Type header validation",
          "pm.test(\"Response has valid Content-Type header\", function () {",
          "    var contentType = pm.response.headers.get('Content-Type');",
          "    pm.expect(contentType).to.exist;",
          "    pm.expect(contentType).to.match(/text\\/html|application\\/json|text\\/plain/,",
          "        `Invalid Content-Type: ${contentType}`);",
          "});",
          "",
          "// Collection-level test: Response body is not empty",
          "pm.test(\"Response body exists\", function () {",
          "    pm.expect(pm.response.text()).to.have.length.greaterThan(0);",
          "});",
          "",
          "// Collection-level test: Security headers for frontend",
          "pm.test(\"Security headers are present\", function () {",
          "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
          "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.exist;",
          "});",
          "",
          "// Log detailed performance metrics",
          "console.log(`[${pm.info.requestName}] Status: ${pm.response.code} | Time: ${pm.response.responseTime}ms | Size: ${pm.response.responseSize} bytes`);"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Public Pages",
      "item": [
        {
          "name": "Get Root Page",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify the frontend root page is accessible and loads quickly",
            "url": {
              "raw": "{{baseUrl}}/",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                ""
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Homepage HTML contains expected content\", function () {",
                  "    pm.expect(pm.response.text()).to.include('arolariu');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get About Page",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify the about page is accessible",
            "url": {
              "raw": "{{baseUrl}}/about",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "about"
              ]
            }
          }
        },
        {
          "name": "Get Domains Page",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify the domains page is accessible",
            "url": {
              "raw": "{{baseUrl}}/domains",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "domains"
              ]
            }
          }
        },
        {
          "name": "Get Privacy Policy",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify the privacy policy page is accessible",
            "url": {
              "raw": "{{baseUrl}}/privacy-and-terms/privacy-policy",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "privacy-and-terms",
                "privacy-policy"
              ]
            }
          }
        },
        {
          "name": "Get Terms of Service",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify the terms of service page is accessible",
            "url": {
              "raw": "{{baseUrl}}/privacy-and-terms/terms-of-service",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "privacy-and-terms",
                "terms-of-service"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "API Routes",
      "item": [
        {
          "name": "Get User Information",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Get current user information from the API route",
            "url": {
              "raw": "{{baseUrl}}/api/user",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "api",
                "user"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response is valid JSON\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "pm.test(\"User object has expected structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('isSignedIn');",
                  "    pm.expect(jsonData).to.have.property('isLoading');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Static Assets",
      "item": [
        {
          "name": "Get Robots.txt",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify robots.txt is accessible for SEO",
            "url": {
              "raw": "{{baseUrl}}/robots.txt",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "robots.txt"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Robots.txt contains directives\", function () {",
                  "    pm.expect(pm.response.text()).to.match(/User-agent|Sitemap/);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Sitemap.xml",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify sitemap.xml is accessible for SEO",
            "url": {
              "raw": "{{baseUrl}}/sitemap.xml",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "sitemap.xml"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Sitemap is valid XML\", function () {",
                  "    pm.expect(pm.response.text()).to.include('<?xml');",
                  "    pm.expect(pm.response.text()).to.include('urlset');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Manifest.json",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify PWA manifest is accessible",
            "url": {
              "raw": "{{baseUrl}}/manifest.json",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "manifest.json"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Manifest is valid JSON\", function () {",
                  "    pm.response.to.have.jsonBody();",
                  "});",
                  "",
                  "pm.test(\"Manifest has required PWA properties\", function () {",
                  "    var manifest = pm.response.json();",
                  "    pm.expect(manifest).to.have.property('name');",
                  "    pm.expect(manifest).to.have.property('short_name');",
                  "    pm.expect(manifest).to.have.property('theme_color');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Favicon",
          "request": {
            "method": "GET",
            "header": [],
            "description": "Verify favicon is accessible",
            "url": {
              "raw": "{{baseUrl}}/favicon.ico",
              "protocol": "{{baseProtocol}}",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "favicon.ico"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Favicon is served successfully\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "baseUrl",
      "value": "{{baseProtocol}}://{{baseHost}}",
      "type": "string"
    },
    {
      "key": "baseHost",
      "value": "arolariu.ro",
      "type": "string"
    },
    {
      "key": "baseProtocol",
      "value": "https",
      "type": "string"
    }
  ]
}
